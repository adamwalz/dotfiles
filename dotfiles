#!/usr/bin/env bash

shopt -s nullglob

NAME=$(basename "${BASH_SOURCE[0]}")
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_DIR=$HOME/.dotfiles_backup/`date -u +"%Y-%m-%d-%H-%M-%S"`

VERSION=2.0.0

RAW_FILE_EXT=rrc

EXCLUDES=(
  $NAME
  README.md
  LICENSE
  backup
  brew.csv
  cask.csv
  .*
)

puts() {
  echo $* >&2
}
log() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*"
}
info() {
  echo -e "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: \033[34m$*\033[0m" >&2
}
warn() {
  echo -e "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: \033[33m$*\033[0m" >&2
}
err() {
  echo -e "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: \033[31m$*\033[0m" >&2
}

platform() {
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    echo 'linux'
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    echo 'darwin'
  elif [[ "$OSTYPE" == 'cygwin' ]]; then
    # POSIX compatibility layer and Linux environment emulation for Windows
    echo 'cygwin'
  elif [[ "$OSTYPE" == 'msys' ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
    echo 'msys'
  elif [[ "$OSTYPE" == "freebsd"* ]]; then
    echo 'freebsd'
  else
    echo 'unknown'
  fi
}

command_exists() {
  command -v $1 >/dev/null 2>&1
}

contains() {
  [[ "$1" =~ (^|[[:space:]])"$2"($|[[:space:]]) ]]
}

usage() {
  puts "$NAME manages dotiles (runcom files)"
  puts ""
  puts "Basic Commands:"
  puts "  install     Install dotfiles"
  puts "  uninstall   Uninstall dotfiles"
  puts ""
  puts "Other Commands:"
  puts "  help        Help about any command"
  puts "  version     Print the $NAME version"
}

backup() {
  from=$1
  to=$2
  if [[ ! -f $from ]]; then return; fi
  info "Backing up old version of $(basename $from)"
  mkdir -p $(dirname $to)
  mv $from $to
}

link_and_backup() {
  src=$1
  target=$2
  backup_target=$3
  info "Linking $target"
  backup $target $backup_target
  mkdir -p $(dirname $target)
  ln -fsn $src $target
}

sub_version() {
  puts "$VERSION"
}

sub_install() {
  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")
  for src in `find $DIR -mindepth 1 -maxdepth 1`; do
    src_relative=`echo $src | sed "s|$DIR/||"`
    if [[ "$src_relative" =~ "mac-"* ]] && [[ ! `platform` == "darwin" ]] || \
       [[ "$src_relative" =~ "linux-"* ]] && ! contains "linux-gnu freebsd" `platform` || \
       [[ "$src_relative" =~ "windows-"* ]] && ! contains "cygwin msys" `platform`; then
      continue
    fi

    # Remove platform specifier from dotfile
    src_relative=`echo $src_relative | sed -E -e 's/^(mac|linux|windows)-//g'`

    # Do not link if the source is a raw file, the target already exists and
    # is a symlink to the source.
    target=$HOME/.$src_relative
    if [[ $src_relative == *"$RAW_FILE_EXT" ]] || \
       contains "${EXCLUDES[*]}" $src_relative || \
       ([[ -h $target ]] && [[ ! -d $target ]] && cmp --silent $src $target); then
      continue
    fi

    link_and_backup $src $target $BACKUP_DIR/$src_relative
  done
  IFS=$SAVEIFS
}

sub_uninstall() {
  info uninstall
}

subcommand=$1
case $subcommand in
    "" | "-h" | "--help" | "help")
      usage
      ;;
    "-v" | "--version")
      sub_version
      ;;
    *)
      shift
      sub_${subcommand} $@
      if [ $? = 127 ]; then
        err "unknown command \"$subcommand\" for \"$NAME\""
        puts ""
        err "Run '$NAME --help' for usage."
        exit 1
      fi
      ;;
esac
