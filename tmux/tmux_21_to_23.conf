#------------------------------------------------------------------------------
#          FILE:  tmux.conf
#   DESCRIPTION:  Configures tmux terminal multiplexer
#        AUTHOR:  Adam Walz <adam@adamwalz.net>
#       VERSION:  4.0.0
#
# See the following for examples:
# - https://gist.github.com/shinzui/866897
# - https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf
#------------------------------------------------------------------------------

run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | awk '{print $2}' | sed 's/\\([0-9]\\{1,\\}.[0-9]\\{1,\\}\\)[a-z]\\{0,1\\}/\\1/g')"

########################
#   General Settings   #
########################

# tmux prefix
unbind-key C-b
set-option -g prefix C-j
bind-key j send-prefix

# use 256 term for pretty colors
set-option -g default-terminal "screen-256color"

# increase scroll-back history
set-option -g history-limit 900000

# set the number of buffers
set-option -g buffer-limit 20

# A window with this flag set is not destroyed when the program running in it exits
set-option -g remain-on-exit off

# don't allow tmux to automatically name window titles
set-option -g allow-rename off
set-window-option -g automatic-rename off

# Set parent terminal title to reflect current window in tmux session
set-option -g set-titles on
set-option -g set-titles-string "#I:#W"

# decrease command delay (increases vim responsiveness)
set-option -sg escape-time 0

# allow multiple commands to be entered without pressing the prefix-key again
set-option -g repeat-time 300

# time for status messages to linger in ms
set-option -g display-time 1500

# start window index at 1
set-option -g base-index 1

# start pane index at 1
set-window-option -g pane-base-index 1

# re-number windows when one is closed
set-option -g renumber-windows on

# use AM/PM for clock
set-window-option -g clock-mode-style 12

# resize windows to be as large as possible when attached from multiple sessions
set-option -g aggressive-resize on

# enable mouse to scroll buffer
set-option -g mouse on

set-option -sa terminal-overrides ',xterm-256color:RGB'

# focus events are requested from the terminal if supported
# and passed through to applications running in tmux
set-option -g focus-events on

########################
#     Key Bindings     #
########################

# Unbind default key bindings, we're going to override
unbind-key "\$" # rename-session
unbind-key ,    # rename-window
unbind-key %    # split-window -h
unbind-key '"'  # split-window
unbind-key "}"  # swap-pane -D
unbind-key "{"  # swap-pane -U
unbind-key [    # paste-buffer
unbind-key ]
unbind-key "'"  # select-window
unbind-key n    # next-window
unbind-key p    # previous-window
unbind-key l    # last-window
unbind-key M-n  # next window with alert
unbind-key M-p  # next window with alert
unbind-key o    # focus thru panes
unbind-key &    # kill-window
unbind-key "#"  # list-buffer
unbind-key =    # choose-buffer
unbind-key z    # zoom-pane
unbind-key M-Up  # resize 5 rows up
unbind-key M-Down # resize 5 rows down
unbind-key M-Right # resize 5 rows right
unbind-key M-Left # resize 5 rows left

# open session chooser
bind-key -n Home choose-tree

# window splitting
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

# new window and retain cwd
bind-key c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.3" | bc)" = 1 ]' " \
  set-hook -g after-new-window 'command-prompt -I \"#{window_name}\" \"rename-window '%%'\"'; \
  set-hook -gu after-new-window"

# quickly resize panes
bind-key = select-layout main-vertical
bind-key < resize-pane -L 25
bind-key > resize-pane -R 25

# Select pane and windows
bind-key -r C-[ previous-window
bind-key -r C-] next-window
bind-key -r [ select-pane -t :.-
bind-key -r ] select-pane -t :.+
bind-key -r Tab last-window   # cycle thru MRU tabs
bind-key -r C-o swap-pane -D

# Zoom pane
bind-key + resize-pane -Z

# Link window
bind-key L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# quickly switch panes
bind-key o select-pane -t :.+

# cycling windows
bind-key -n S-right next
bind-key -n S-left prev

# moving windows
bind-key -n C-S-right swap-window -t +1
bind-key -n C-S-left swap-window -t -1

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind-key '\' if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# cycling sessions
bind-key -n S-Up switch-client -p
bind-key -n S-Down switch-client -n

# Kill pane/window/session shortcuts
bind-key x kill-pane
bind-key X kill-window
bind-key C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind-key Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Rename window and session
bind-key r command-prompt -I "#{window_name}" "rename-window '%%'"
bind-key R command-prompt -I "#{session_name}" "rename-session '%%'"

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind-key C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind-key d detach
bind-key D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# edit the config file
bind-key C-e new-window -n '~/.tmux/tmux_21_to_23.conf' "sh -c '\${EDITOR:-vim} ~/.tmux/tmux_21_to_23.conf && tmux source ~/.tmux/tmux_21_to_23.conf && tmux display \"Config reloaded!\"'"

# force a reload of the config file
bind-key C-r source-file ~/.tmux/tmux_21_to_23.conf \; display "Config reloaded!"

# Hide status bar on demand
bind-key C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

####################################################
#     Window monitoring for activity and silence   #
####################################################

# Toggle monitoring activity
bind-key m set-window-option monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind-key M if -F '#{monitor-silence}' \
    'set-window-option monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "set-window-option monitor-silence %%"'

# Activity bell and whistles
set-option -g visual-activity on

##################################################
#        Copy mode, scroll and clipboard         #
##################################################

set-option -g @copy_use_osc52_fallback on

# use vim key bindings
set-window-option -g mode-keys vi

# paste
bind-key p paste-buffer
bind-key C-p choose-buffer

# trigger copy mode by
bind-key -n M-Up copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind-key -T copy-mode-vi M-Up              send-keys -X scroll-up
bind-key -T copy-mode-vi M-Down            send-keys -X scroll-down
bind-key -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind-key -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind-key -T copy-mode-vi PageDown          send-keys -X page-down
bind-key -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind-key -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind-key -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
if-shell -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
  "run 'tmux set-option -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"

# Copy selected text
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind-key -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind-key -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

###########################
#          Theme          #
###########################

# These are named colors, just for convenience
color_black="colour16"
color_white="colour231"

color_green="colour2"
color_darkestgreen="colour22"
color_darkgreen="colour28"
color_mediumgreen="colour70"
color_brightgreen="colour148"

color_darkestcyan="colour23"
color_darkcyan="colour74"
color_mediumcyan="colour117"
color_brightcyan="colour159"

color_darkestblue="colour24"
color_darkblue="colour31"

color_red="colour1"
color_darkestred="colour52"
color_darkred="colour88"
color_mediumred="colour124"
color_brightred="colour160"
color_brightestred="colour196"

color_darkestpurple="colour55"
color_mediumpurple="colour98"
color_lightpurple="colour189"

color_darkorange="colour94"
color_mediumorange="colour166"
color_brightorange="colour208"
color_brightestorange="colour214"

color_yellow="colour11"
color_brightyellow="colour220"

color_gray0="colour233"
color_gray1="colour235"
color_gray2="colour236"
color_gray3="colour239"
color_gray4="colour240"
color_gray5="colour241"
color_gray6="colour244"
color_gray7="colour245"
color_gray8="colour247"
color_gray9="colour250"
color_gray10="colour2522"
color_gray11="colour234"
color_gray90="colour254"
color_gray70="colour249"

color_lightyellowgreen="colour106"
color_gold3="color178"
color_orangered="colour202"
color_steelblue="colour67"
color_darkorange3="colour166"
color_skyblue1="colour117"
color_khaki1="colour228"

# These variables are required
# Values can be changed but variables must exist and cannot be renamed
color_dark="$color_gray0"
color_light="$color_gray9"
color_lighter="$color_white"
color_divider="$color_gray7"
color_session_text="$color_gray2"
color_status_text="colour245"
color_main="$color_darkblue"
color_main_analogous="$color_mediumcyan"
color_secondary="$color_mediumpurple"

color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"

color_window_off_indicator="$color_mediumpurple"
color_window_off_status_bg="$color_gray5"
color_window_off_status_current_bg="$color_green"

######################################
#     Appearance and Status Bar      #
######################################

set-option -g mode-style "fg=default,bg=$color_main"

# command line style
set-option -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set-option -g status-style "fg=$color_light,bg=$color_dark"

# last window status
set-option -g window-status-last-style "fg=$color_main,bg=$color_dark"

# window segments in status line
set-option -g window-status-separator ""
separator_powerline_left_hard=""
separator_powerline_right_hard=""
separator_powerline_left_soft=""
separator_powerline_right_soft=""

set-window-option -qg window-status-style "fg=$color_light,bg=$color_dark"
set-window-option -g window-status-current-style "fg=$color_main_analogous,bg=$color_main"

set-window-option -g window-status-format "#[fg=$color_divider,bold] #I#{?window_last_flag,-, } #[fg=$color_divider,nobold]$separator_powerline_right_soft#[default] #W "
set-window-option -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right_hard#[default] #I* $separator_powerline_right_soft#[fg=$color_lighter,bold] #W #[fg=$color_main,bg=$color_dark]$separator_powerline_right_hard#[default]"

# when window has monitoring notification
set-window-option -qg window-status-activity-style "fg=$color_level_warn,bg=$color_dark"
set-window-option -qg window-status-bell-style "fg=$color_level_stress,bg=$color_dark"

# outline for active pane
set-window-option -g pane-active-border-style "fg=$color_main"

# general status bar settings
set-option -g status on
set-option -g status-interval 5
set-option -g status-position bottom
set-option -g status-justify left
set-option -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#{?client_prefix,#[fg=$color_light]#[bg=$color_main],#[fg=$color_session_text]#[bg=$color_light]}#[bold] #S #{?client_prefix,#[fg=$color_main],#[fg=$color_light]}#[bg=$color_dark]$separator_powerline_right_hard"
wg_user_host="#[fg=$color_main,bg=$color_dark]$separator_powerline_left_hard#[fg=$color_lighter,bg=$color_main,bold] #(whoami)#[fg=$color_main_analogous,nobold]#{?#(~/.tmux/ssh_connection.sh),@#[fg=$color_lighter]#H,} #[fg=$color_dark,bg=$color_main]$separator_powerline_left_hard#[default]"
wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#(~/.tmux/keys_off.sh)#[default]"

set-option -g status-left "$wg_session"
set-option -g status-right "$wg_user_host $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} | #{sysstat_loadavg} $wg_date $wg_battery #{online_status}"

# online and offline icon for tmux-online-status
set-option -g @online_icon "#[fg=$color_level_ok]●#[default]"
set-option -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set-option -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

# C-optiononfigure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
set-option -g @sysstat_cpu_color_low "$color_level_ok"
set-option -g @sysstat_cpu_color_medium "$color_level_warn"
set-option -g @sysstat_cpu_color_stress "$color_level_stress"

set-option -g @sysstat_mem_color_low "$color_level_ok"
set-option -g @sysstat_mem_color_medium "$color_level_warn"
set-option -g @sysstat_mem_color_stress "$color_level_stress"

set-option -g @sysstat_swap_color_low "$color_level_ok"
set-option -g @sysstat_swap_color_medium "$color_level_warn"
set-option -g @sysstat_swap_color_stress "$color_level_stress"

# Configure tmux-battery widget colors
set-option -g @batt_color_full_charge "#[fg=$color_level_ok]"
set-option -g @batt_color_high_charge "#[fg=$color_level_ok]"
set-option -g @batt_color_medium_charge "#[fg=$color_level_warn]"
set-option -g @batt_color_low_charge "#[fg=$color_level_stress]"

##################################
#      Renew Environment         #
##################################

set-option -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind-key '$' run "~/.tmux/renew_env.sh"

###########################
#         Plugins         #
###########################

#set-option -g @plugin 'tmux-plugins/tpm'
#set-option -g @plugin 'tmux-plugins/tmux-battery'
#set-option -g @plugin 'tmux-plugins/tmux-online-status'
#set-option -g @plugin 'tmux-plugins/tmux-sidebar'
#set-option -g @plugin 'tmux-plugins/tmux-copycat'
#set-option -g @plugin 'tmux-plugins/tmux-open'
#set-option -g @plugin 'samoshkin/tmux-plugin-sysstat'
set-option -g @tpm_plugins ' \
    tmux-plugins/tpm \
    tmux-plugins/tmux-battery \
    tmux-plugins/tmux-online-status \
    tmux-plugins/tmux-sidebar \
    tmux-plugins/tmux-copycat \
    tmux-plugins/tmux-open \
    samoshkin/tmux-plugin-sysstat \
  '

# Plugin properties
set-option -g @sidebar-tree 't'
set-option -g @sidebar-tree-focus 'T'
set-option -g @sidebar-tree-command 'tree -C'

set-option -g @open-S 'https://www.google.com/search?q='

##############################################
#      Nesting Local and Remote Session      #
##############################################

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux_21_to_23.remote.conf'

# We want to have single prefix key "C-j", usable both for local and remote session
# we don't want to use the "C-j" + "j" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind-key -T root F12  \
    set-option prefix None \;\
    set-option key-table off \;\
    set-option status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set-option window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right_hard#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right_hard#[default]" \;\
    set-option window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if-shell -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind-key -T off F12 \
  set-option -u prefix \;\
  set-option -u key-table \;\
  set-option -u status-style \;\
  set-option -u window-status-current-style \;\
  set-option -u window-status-current-format \;\
  refresh-client -S

# Run all plugins' scripts
run-shell '~/.tmux/plugins/tpm/tpm'
